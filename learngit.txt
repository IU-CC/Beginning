1.安装:
	因为Captain系统Xcode自带git, 方便了很多
	但是还是需要配置一下 git config —global user.name “my github account name”
			  git config -global user.email “my email address”

2.创建我的版本库
	mkdir wccscgit  // 用于在个人目录中创建一个wccscgit的库
	cd wccscgit
	pwd

3.在库中创建一个文件
	touch readme.txt
	open readme.txt   // 然后edit it
	git add readme.txt
	git commit -m “explain this file”   // tell git and commit
	git commit -m “add x files.”  // I can commit it 3/1time

4. 时光机 条件是还没推送到远程版本库
	git status  // 查看当前状态 Master the current status
	git diff  readme.txt// 查看当前状态做了什么修改
	git add  // 然后添加
	git add . // 添加当前文件夹下所有的代码
	git commit -m “explain new” 
	git config alias.st “status” // git简写
	git config alias.ci “commit -m” // git简写

5. 时光机-版本回退
	git log  // 查看版本信息日志
	git log —-pretty=oneline //简化版本信息日志
	git reflog // 显示时光机命令历史 重返未来
	git commit --amend -m “新描述”    // 如果已经commit了, 但是还没push到远程, 可以用这个命令来重写上次commit的消息, 并且将新的更改和上次更改合并
	
	1. 未使用git add缓存代码时
	git checkout -- xxx(xxx是文件名)
	git checkout .放弃所有文件的修改

	2. 已经使用了git add缓存代码
	git reset HEAD xxx放弃指定文件的缓存
	git reset .放弃所有文件的缓存
	此番操作后回到 1

	3. 已经使用了git commit提交代码
	git reset —-hard HEAD^ //回到上一次编辑状态 ^^两次 以此类推, HEAD~100 100次
	git reset —-hard HEAD~n // 回到前n个版本
	git reset —-hard xxxxxx // xxx是版本号/提交id, 可回到未来或者回到任意版本


6.git add and git commit 
	工作区修改, 每次修改后都要git add 到暂存区, 然后git commit提交

7.撤销最近一次全部的修改内容
	git checkout —- readme.txt  // 让这个文件回到最近一次git commit或git add时的状态
	git reset HEAD readme.txt //撤销add操作后暂存区的修改,重新放回工作区   
	小结: 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

8. 删除文件:
	rm read.txt // 用命令行删除
	git rm file  // 删除文件(名称file)
	git commit -m “explain” // 从版本库删除该文件
	git checkout —- readme.txt // 还原从文件管理器删除的文件(前提是版本库里的还没删),只能恢复文件到最新版本

9. 远程仓库
	ssh-keygen -t rsa -C “my email address”
	在个人文件夹里生成一个.ssh的隐藏文件夹, 里面有id_rsa 私钥(不能泄露) id_rsa.pub公钥(可以用于github的ssh)
	然后登陆github, 在个人账户设置里”SSH Keys”里面点击 “Add SSH Key”, 填上任意Title, 在Key文本框里粘贴上id_rsa.pub文件内容, 然后点击Add key就成功了

10.添加远程库
	在github创建一个库, 然后在本地文件夹下也创建库git init, 添加到库git add file
	提交库git commit -m “explain”
	根据提示输入 git remote add origin git@github.com:WCCSC/库名.git
	然后推送到远程库 git push -u origin master

11. 克隆
	在github上创建一个库, 然后克隆到本地
	git clone git@github.com:WCCSC/创建的库名.git
	然后本地会创建一个和远程库名一样的文件夹, 在里面有对应的创建的文件
	尽量使用git协议(ssh支持原生), https速度慢(某些只开放http端口的公司只能用这个)

12. 后续进阶教程待有时间再慢慢学习
	
13. 多人开发
	1. 创建共享版本库
	模拟创建一个公司服务器版本库文件夹
	在这个文件夹下
	git init -bare
	2. 经理下载共享版本库内容
	在公司服务器同级文件夹下创建经理文件夹(模拟公司环境)
	然后cd进入经理文件夹
	git clone 地址
	3. 添加忽略文件
	创建.gitignore
	去github找对应gitignore:https://github.com/github/gitignore/blob/master/Objective-C.gitignore
	然后将所有代码copy到.gitignore中
	git add .gitignore
	git commit -m”添加了需要忽略的文件”
	4. 初始化项目
	创建项目
	commit项目
	push项目
	5. 项目成员张三加入开发
	git clone地址
	6. 开始多人开发
	修改ViewController
	创建person类
	演示冲突
	演示storyboard中的冲突
	在项目中添加静态库:右键->add

14. 多人开发管理
	1) 版本备份
	git tag -a版本名称 -m”注释”
	git tag // 查看版本名称
	git push origin 版本名称
	2) 版本修复分支
	git checkout weibo1.0 // 切换到备份1.0的tag中
	git branch weibo1.0fixbug // 创建1.0fixbug的分支
	git branch // 查看所有分支
	git checkout weibo1.0fixbug
	或者这样
	git checkout weibo1.0
	git checkout -b weibo1.0fixbug
	查看远程分支
	git branch -r
	删除远程分支
	git branch -r -d origin/weibo1.0fixbug
	删除远程主分支
	git push origin —-delete weibo1.0fixbug
	3) 修复bug, 对修复完成的版本进行备份
	git tag -a weibo1.1 -m”注释”
	git push origin weibo1.1
	4) 将分支中的代码合并到master分支
	git checkout master
	5) 将主分支代码合并到分支
	git merge master
	删除分支
	git branch -d weibo1.0fixbug

